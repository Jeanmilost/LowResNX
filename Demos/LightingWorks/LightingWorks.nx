'***************************************
'LIGHTING WORKS
'AUTHOR JEAN-MILOST REYMOND
'***************************************

GLOBAL ISDIRLIGHT, ISPOINTLIGHT, DIRANGLE

ISDIRLIGHT   = 1
ISPOINTLIGHT = 0
DIRANGLE     = 0.0

DIM GLOBAL DIRLIGHTDIR(3)
DIM GLOBAL DIRUP(3)
DIM GLOBAL POINTPOS(3)
DIM GLOBAL D(3)
DIM GLOBAL N(3)

'DIRECTIONAL LIGHT DIRECTION
DIRLIGHTDIR(0) =  0.0
DIRLIGHTDIR(1) = -1.0
DIRLIGHTDIR(2) =  0.0

'THE SURFACE NORMAL (OR UP DIRECTION)
DIRUP(0) = 0.0
DIRUP(1) = 1.0
DIRUP(2) = 0.0

'THE POINT POSITION ABOVE THE SURFACE. THE 2ND PARAMETER IS THE HEIGHT
POINTPOS(0) = 76.0
POINTPOS(1) = 5.0
POINTPOS(2) = 60.0

GAMEPAD 1

'***************************************
'MAIN LOOP
'***************************************
DO
    'SWITCH BETWEEN DIRECTIONAL AND POINT LIGHT
    IF BUTTON TAP(0, 0) THEN
        ISDIRLIGHT   = 1
        ISPOINTLIGHT = 0
    ELSE IF BUTTON TAP(0, 1) THEN
        ISDIRLIGHT   = 0
        ISPOINTLIGHT = 1
    END IF

    'CHANGE THE LIGHT DIRECTION OR POSITION
    IF UP(0) THEN
        IF (ISDIRLIGHT) THEN
            'DIRECTIONAL LIGHT, CHANGE THE LIGHT ANGLE
            DIRANGLE = MAX(DIRANGLE - 0.05, 0.0)
        ELSE
            'POINT LIGHT, CHANGE THE LIGHT POSITION
            POINTPOS(2) = MAX(POINTPOS(2) - 1, 0)
        END IF
    ELSE IF DOWN(0) THEN
        IF (ISDIRLIGHT) THEN
            'DIRECTIONAL LIGHT, CHANGE THE LIGHT ANGLE
            DIRANGLE = MIN(DIRANGLE + 0.05, PI / 2)
        ELSE
            'POINT LIGHT, CHANGE THE LIGHT POSITION
            POINTPOS(2) = MIN(POINTPOS(2) + 1, 116)
        END IF
    ELSE IF LEFT(0) THEN
        IF (ISPOINTLIGHT) THEN
            POINTPOS(0) = MAX(POINTPOS(0) - 1, 0)
        END IF
    ELSE IF RIGHT(0) THEN
        IF (ISPOINTLIGHT) THEN
            POINTPOS(0) = MIN(POINTPOS(0) + 1, 152)
        END IF
    END IF

    INTENSITY = 0

    'CALCULATE THE DIRECTIONAL LIGHT INTENSITY ONCE
    IF (ISDIRLIGHT) THEN
        DIRLIGHTDIR(0) = SIN(DIRANGLE)
        DIRLIGHTDIR(1) = COS(DIRANGLE)
        CALL CALCULATEINTENSITY(1, 0, 0, INTENSITY)
    END IF

    BG 1

    'DRAW THE WALL AND APPLY THE LIGHTING
    FOR Y = 0 TO 15
        FOR X = 0 TO 19
            'CALCULATE THE POINT LIGHT INTENSITY FOR EACH CELL
            IF (ISPOINTLIGHT) THEN
                CALL CALCULATEINTENSITY(0, X, Y, INTENSITY)
            END IF

            'DRAW THE CELL
            PAL 4 + INTENSITY
            CELL X, Y, 1
        NEXT X
    NEXT Y

    BG 0
    PAL 2

    SPRITE 0 PAL 1
    LOCATE 0, 0
    BG FILL 0, 0 TO 19, 0 CHAR 0

    'SHOW THE LIGHT INFO
    IF (ISDIRLIGHT) THEN
        PRINT "DIRECTIONAL LIGHT"
        SPRITE 0, 145, 110, 3 + INTENSITY
    ELSE IF (ISPOINTLIGHT) THEN
        PRINT "POINT LIGHT"
        SPRITE 0, POINTPOS(0), POINTPOS(2), 2
    END IF

    WAIT VBL
LOOP

'***************************************
'CALCULATE THE LIGHT INTENSITY
'ISDIRLIGHT - IF 1 IS A DIR LIGHT, POINT LIGHT OTHERWISE
'X - POINT LIGHT X POSITION
'Y - POINT LIGHT Y POSITION
'[OUT] INTENSITY - THE LIGHT INTENSITY
'***************************************
SUB CALCULATEINTENSITY(ISDIRLIGHT, X, Y, INTENSITY)
    'CALCULATE THE DIRECTIONAL LIGHT INTENSITY
    IF (ISDIRLIGHT) THEN
        DOT = 0.0
        CALL VEC3DOT(DIRLIGHTDIR(), DIRUP(), DOT)
        INTENSITY = INT(MAX(DOT * 3, 0))
        EXIT SUB
    END IF

    DIM LD(3)
    DIM RAY(3)

    'CALCULATE THE LIGHT RAY DIRECTION
    LD(0) = (POINTPOS(0) + 4) - ((X * 8) + 4)
    LD(1) =  POINTPOS(1)
    LD(2) = (POINTPOS(2) + 4) - ((Y * 8) + 4)
    CALL VEC3NORMALIZE(LD(0), LD(1), LD(2), RAY(0), RAY(1), RAY(2))

    'CALCULATE THE LIGHT ANGLE BETWEEN THE LIGHT RAY AND THE SURFACE
    DOT = 0.0
    CALL VEC3DOT(DIRUP(), RAY(), DOT)

    'CALCULATE THE LIGHT INTENSITY
    INTENSITY = INT(MIN(MAX(DOT * EXP(1), 0) * 3, 3))
END SUB

'***************************************
'CALCULATE THE LENGTH OF A 3D VECTOR
'VX - THE VECTOR X COMPONENT
'VY - THE VECTOR Y COMPONENT
'VZ - THE VECTOR Z COMPONENT
'[OUT] LN - THE VECTOR LENGTH
'***************************************
SUB VEC3LENGTH(VX, VY, VZ, LN)
    LN = SQR((VX * VX) + (VY * VY) + (VZ * VZ))
END SUB

'***************************************
'NORMALIZE A 3D VECTOR
'VX - THE VECTOR X COMPONENT
'VY - THE VECTOR Y COMPONENT
'VZ - THE VECTOR Z COMPONENT
'[OUT] NX - THE NORMALIZED VECTOR X COMPONENT
'[OUT] NY - THE NORMALIZED VECTOR Y COMPONENT
'[OUT] NZ - THE NORMALIZED VECTOR Z COMPONENT
'***************************************
SUB VEC3NORMALIZE(VX, VY, VZ, NX, NY, NZ)
    LN = 0.0

    'CALCULATE THE VECTOR LENGTH
    CALL VEC3LENGTH(VX, VY, VZ, LN)

    'NO VECTOR LENGTH?
    IF LN = 0.0 THEN
        NX = 0.0
        NY = 0.0
        NZ = 0.0
        EXIT SUB
    END IF

    'NORMALIZE VECTOR (THUS VALUES WILL ALWAYS BE BETWEEN 0.0 AND 1.0)
    NX = (VX / LN)
    NY = (VY / LN)
    NZ = (VZ / LN)
END SUB

'***************************************
'CALCULATE DOT PRODUCT BETWEEN 2 VECTORS
'V1 - FIRST VECTOR
'V2 - SECOND VECTOR
'[OUT] R - DOT PRODUCT
'***************************************
SUB VEC3DOT(V1(), V2(), R)
    R = ((V1(0) * V2(0)) + (V1(1) * V2(1)) + (V1(2) * V2(2)))
END SUB

#1:MAIN PALETTES
003F2A15003C0B00003F0F0700030201
001010000024201000382410003E3924

#2:MAIN CHARACTERS
00000000000000000000000000000000
FF8181FFFF1818FF017F7FFF10F7F7FF
3C4291A18181423C0000000000000000
00000000000000FE0101010101010101
000000806018060001010101010101FF
100808040402020001010101010101FF
010101010101010000000000000000FF

