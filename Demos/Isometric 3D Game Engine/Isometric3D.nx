'***************************************
'3D ISOMETRIC GAME ENGINE
'BY JEAN-MILOST REYMOND
'***************************************

GLOBAL ITEMCOUNT, RADIUS, USEDIAGS, PLAYERDIR, PLAYERVELOCITY, PLAYERLIFE, LIFEFRAME, ROOMCHANGING, NEXTPOSX, NEXTPOSY, NEXTDIR, FADERVALUE, FADEROFFSET, MSGX, INFOMSG$

'ISOMETRIC COORDINATE SYSTEM AXIS:
' Z   Y
' |  /
' | /\/
' |/\/\/
'  \/\/\
'   \/\
'    \
'     X
DIM GLOBAL ORIGIN(2)

'SPRITES ARE ORGANIZED AS FOLLOW:
'0 TO 3   - USED FOR USER INTERFACE
'4 TO 17  - USED FOR FRONT DOORS
'SINCE 18 - SCENE ITEMS

'BOUNDING BOX COLLECTION, IN RELATIVE COORDINATES, ORGANIZED AS FOLLOW:
'0 - 1X2 CELLS BOUNDING BOX, I.E 8X8X16 PIXELS ON XYZ AXIS
'1 - 1X2 CELLS POSITIVE X SHIFTED FOR LEFT OBJECTS LEFT SIDE
'2 - 1X2 CELLS NEGATIVE X SHIFTED FOR LEFT OBJECTS RIGHT SIDE
'3 - 1X2 CELLS POSITIVE Y SHIFTED FOR RIGHT OBJECTS LEFT SIDE
'4 - 1X2 CELLS NEGATIVE Y SHIFTED FOR RIGHT OBJECTS RIGHT SIDE
'ITEMS ARE ORGANIZED AS FOLLOW:
'0 - MIN EDGE, X POSITION
'1 - MIN EDGE, Y POSITION
'2 - MIN EDGE, Z POSITION
'3 - MAX EDGE, X POSITION
'4 - MAX EDGE, Y POSITION
'5 - MAX EDGE, Z POSITION
DIM GLOBAL BBOX(5, 6)

'SPRITE COLLECTION, ITEMS ARE:
'0  - PLAYER LEFT DIR, FRAME 1
'1  - PLAYER LEFT DIR, FRAME 2
'2  - PLAYER BOTTOM DIR, FRAME 1
'3  - PLAYER BOTTOM DIR, FRAME 2
'4  - ROBOT LEFT DIR, FRAME 1
'5  - ROBOT LEFT DIR, FRAME 2
'6  - ROBOT BOTTOM DIR, FRAME 1
'7  - ROBOT BOTTOM DIR, FRAME 2
'8  - GREEN PLANT
'9  - LEFT CABINET, LEFT PART
'10 - LEFT CABINET, RIGHT PART
'11 - RIGHT CABINET, LEFT PART
'12 - RIGHT CABINET, RIGHT PART
'13 - LEFT DESK, LEFT PART
'14 - LEFT DESK, RIGHT PART
'15 - RIGHT DESK, LEFT PART
'16 - RIGHT DESK, RIGHT PART
'17 - LEFT TERMINAL
'18 - RIGHT TERMINAL
'19 - LEFT COMPUTER DESK, LEFT PART
'20 - LEFT COMPUTER DESK, RIGHT PART
'21 - RIGHT COMPUTER DESK, LEFT PART
'22 - RIGHT COMPUTER DESK, RIGHT PART
'23 - LEFT DRAWER DESK, LEFT PART
'24 - LEFT DRAWER DESK, RIGHT PART
'25 - RIGHT DRAWER DESK, LEFT PART
'26 - RIGHT DRAWER DESK, RIGHT PART
'27 - LEFT SERVER, LEFT PART
'28 - LEFT SERVER, RIGHT PART
'29 - RIGHT SERVER, LEFT PART
'30 - RIGHT SERVER, RIGHT PART
'31 - LEFT TRANSLUCENT FENCE
'32 - RIGHT TRANSLUCENT FENCE
'33 - PURPLE CRYSTAL
'34 - BLUE CRYSTAL
'35 - PURPLE TRANSLUCENT CRYSTAL
'36 - BLUE TRANSLUCENT CRYSTAL
'EACH SPRITE ITEM IS ORGANIZED AS FOLLOW:
'0 - TOP CHAR INDEX
'1 - MASK CHAR INDEX
'2 - BOTTOM CHAR INDEX
'3 - TOP CHAR PALETTE INDEX
'4 - MASK CHAR PALETTE INDEX
'5 - BOTTOM CHAR PALETTE INDEX
'6 - Y DELTA BETWEEN TOP AND BOTTOM CHARS
'7 - BOUNDING BOX ITEM (IN BOUNDING BOX COLLECTION)
DIM GLOBAL COLLECTION(37, 8)

'PLAYER CHARACTER DATA, INDEX ARE:
'0 - X POSITION
'1 - Y POSITION
'2 - Z POSITION
'3 - WALKING ANIMATION FRAME
DIM GLOBAL CHARDATA(4)

'DOORS, ORGANIZED AS FOLLOW:
'0 - TOP DOOR
'1 - RIGHT DOOR
'2 - BOTTOM DOOR
'3 - LEFT DOOR
'EACH DOOR CONTAINS ASSOCIATED DATA, WHICH ARE DEFINED AS FOLLOW:
'0 - IF 1, DOOR IS VISIBLE, OTHERWISE HIDDEN
'1 - MIN TRIGGER ZONE EDGE, X POSITION
'2 - MIN TRIGGER ZONE EDGE, Y POSITION
'3 - MIN TRIGGER ZONE EDGE, Z POSITION
'4 - MAX TRIGGER ZONE EDGE, X POSITION
'5 - MAX TRIGGER ZONE EDGE, Y POSITION
'6 - MAX TRIGGER ZONE EDGE, Z POSITION
DIM GLOBAL DOORS(4, 7)

'SCENE ITEMS, MAX 15 PER SCENE
'INDEX ARE:
'0 - X POSITION
'1 - Y POSITION
'2 - Z POSITION
'3 - SPRITE INDEX IN THE COLLECTION
'4 - IF 1, SPRITE SHOULD BE MIRRORED
'5 - IF 1, THE ITEM IS VISIBLE IN THE SCREEN
'6 - WALKING ANIMATION FRAME (OPTIONAL)
'7 - COLOR ANIMATION FRAME (OPTIONAL)
'8 - LAST KNOWN DIR (OPTIONAL)
DIM GLOBAL SCENEITEMS(15, 9)

'PLAYER WALLET CONTENT, EACH ITEM MAY BE ONE OF THE FOLLOWING VALUE:
'0 = EMPTY
'1 = RED CARD
'2 = GREEN CARD
'3 = BLUE CARD
DIM GLOBAL WALLET(4)

'PALETTES ARRAY FOR BLENDING
DIM GLOBAL PALETTES(8, 4)

'GLOBAL VALUES INIT
ITEMCOUNT      = 15
PLAYERVELOCITY = 0.75
PLAYERLIFE     = 100
LIFEFRAME      = 0
FADEROFFSET    = 0.05

GAMEPAD 1

'WHETHER OR NOT DIAGONAL CONTROLS ARE USED
USEDIAGS = 0

'SET THE SCENE ORIGIN AND RADIUS FROM ORIGIN TO LIMITS ON EACH AXIS
ORIGIN(0) = 25.25
ORIGIN(1) = 105.25
RADIUS    = 30.5

'LOAD THE BOUNDING BOX COLLECTION
CALL LOADBBOX

'LOAD THE SPRITE COLLECTION
CALL LOADSPRITES

'LOAD THE PLAYER DATA
CALL LOADPLAYER

'LOAD THE DOOR DATA
CALL LOADDOORS

'LOAD THE LEVEL
CALL LOADLEVEL

'SAVE THE PALETTES STATE
CALL SAVEPALETTES

'DRAW THE SCENE PART WHICH WILL NOT CHANGE DURING THE SCENE LIFETIME
CALL DRAWSTATICSCENE

ON RASTER CALL SCROLLTEXTRASTERFUNC

'MAIN LOOP
DO
    'USED FOR DEBUGGING
    'LOCATE 0, 0
    'PRINT CHARDATA(0)
    'LOCATE 8, 0
    'PRINT CHARDATA(1)

    'CHECK DIAGONALS SELECTION
    IF BUTTON(0, 0) THEN
        USEDIAGS = 1
    ELSE IF BUTTON(0, 1) THEN
        USEDIAGS = 0
    END IF

    'IS PLAYER ENTERING NEXT ROOM?
    IF ROOMCHANGING THEN
        FADERVALUE = FADERVALUE + FADEROFFSET

        'CHECK FADER VALUE LIMITS
        IF FADERVALUE >= 1.0 THEN
            'MAX FADE VALUE REACHED, CONFIGURE PLAYER POS AND NEXT ROOM
            FADEROFFSET = -FADEROFFSET
            FADERVALUE  =  1.0
            CHARDATA(0) =  NEXTPOSX
            CHARDATA(1) =  NEXTPOSY
            PLAYERDIR   =  NEXTDIR
        ELSE IF FADERVALUE <= 0.0 THEN
            'MIN FADE VALUE REACHED, STOP THE TRANSITION
            FADEROFFSET  = -FADEROFFSET
            FADERVALUE   =  0.0
            ROOMCHANGING =  0
        END IF

        'FADE THE WHOLE SCENE IN OR OUT
        CALL FADEPALETTES(0, FADERVALUE, 6)
    END IF

    CALL MOVEPLAYER
    CALL ANIMSCENEITEMS
    CALL DRAWSCENE
    CALL DRAWINTERFACE
    CALL SHOWMSG

    WAIT VBL
LOOP

'***************************************
'LOAD THE BOUNDING BOX COLLECTION
'***************************************
SUB LOADBBOX
    RESTORE BBOXDATA

    FOR I = 0 TO UBOUND(BBOX) - 1
        FOR J = 0 TO UBOUND(BBOX, 2) - 1
            READ BBOX(I, J)
        NEXT J
    NEXT I
END SUB

'***************************************
'LOAD THE SPRITE COLLECTION
'***************************************
SUB LOADSPRITES
    RESTORE COLLECTIONDATA

    FOR I = 0 TO UBOUND(COLLECTION) - 1
        FOR J = 0 TO UBOUND(COLLECTION, 2) - 1
            READ COLLECTION(I, J)
        NEXT J
    NEXT I
END SUB

'***************************************
'LOAD THE PLAYER CHARACTER DATA
'***************************************
SUB LOADPLAYER
    'SET THE PLAYER ON THE CENTER OF THE ROOM
    CHARDATA(0) = ORIGIN(0)
    CHARDATA(1) = ORIGIN(1)
    CHARDATA(2) = 0.0

    RESTORE PLAYERDATA

    FOR I = 3 TO UBOUND(CHARDATA) - 1
        READ CHARDATA(I)
    NEXT I
END SUB

'***************************************
'LOAD THE DOORS DATA
'***************************************
SUB LOADDOORS
    RESTORE DOORDATA

    FOR I = 0 TO UBOUND(DOORS) - 1
        FOR J = 1 TO UBOUND(DOORS, 2) - 1
            READ DOORS(I, J)
        NEXT J
    NEXT I
END SUB

'***************************************
'LOAD A LEVEL
'***************************************
SUB LOADLEVEL
    'TODO FIXME DONT'T HARDCODE, USE A PARAMETER INSTEAD
    RESTORE ENTRANCE

    'READ NUMBER OF ITEMS IN SCENE
    READ COUNT

    'ITERATE THROUGH OBJECTS TO CREATE
    FOR I = 1 TO COUNT
        'READ NEXT ITEM FROM SCENE DATA
        FOR J = 0 TO UBOUND(SCENEITEMS, 2) - 5
            READ SCENEITEMS(I, J)
        NEXT J

        'TURN ITEM VISIBLE AND RESET ITS ANIMATION DATA
        SCENEITEMS(I, UBOUND(SCENEITEMS, 2) - 4) = 1
        SCENEITEMS(I, UBOUND(SCENEITEMS, 2) - 3) = 0
        SCENEITEMS(I, UBOUND(SCENEITEMS, 2) - 2) = 0
        SCENEITEMS(I, UBOUND(SCENEITEMS, 2) - 1) = 0
    NEXT I

    'READ THE DOORS CONFIGURATION FOR THE CURRENT ROOM
    READ DOORS(0, 0)
    READ DOORS(1, 0)
    READ DOORS(2, 0)
    READ DOORS(3, 0)
END SUB

'***************************************
'SAVE THE PALETTES
'***************************************
SUB SAVEPALETTES
    FOR I = 0 TO UBOUND(PALETTES, 1) - 1
        FOR J = 0 TO UBOUND(PALETTES, 2) - 1
            PALETTES(I, J) = COLOR(I, J)
        NEXT J
    NEXT I
END SUB

'***************************************
'FADE THE WHOLE PALETTE WITH A TARGET COLOR
'TARGETCOL - TARGET COLOR TO REACH
'VALUE - BLENDING VALUE BETWEEN 0.0 AND 1.0
'LIMIT - PALETTE UNTIL WHICH THE VALUE SHOULD BE APPLIED
'***************************************
SUB FADEPALETTES(TARGETCOL, VALUE, LIMIT)
    DIM C(4)

    MAXPAL = UBOUND(PALETTES, 1) - 1

    IF LIMIT < MAXPAL THEN
        MAXPAL = LIMIT
    END IF

    'BLEND EACH PALETTE COLORS WITH TARGET COLOR
    FOR I = 0 TO MAXPAL
        CALL BLENDCOLORS(PALETTES(I, 0), TARGETCOL, VALUE, C(0))
        CALL BLENDCOLORS(PALETTES(I, 1), TARGETCOL, VALUE, C(1))
        CALL BLENDCOLORS(PALETTES(I, 2), TARGETCOL, VALUE, C(2))
        CALL BLENDCOLORS(PALETTES(I, 3), TARGETCOL, VALUE, C(3))

        PALETTE I, C(0), C(1), C(2), C(3)
    NEXT I
END SUB

'***************************************
'BLEND COLORS TOGETHER
'STARTCOL - START COLOR TO BLEND
'ENDCOL - END COLOR TO BLEND WITH
'VALUE - BLENDING VALUE BETWEEN 0.0 AND 1.0
'RESULT[OUT] - BLENDED COLOR
'***************************************
SUB BLENDCOLORS(STARTCOL, ENDCOL, VALUE, RESULT)
    'GET THE START COLOR RGB COMPONENTS
    STARTR = INT(STARTCOL / 16)
    STARTG = INT(STARTCOL / 4) MOD 4
    STARTB =     STARTCOL      MOD 4

    'GET THE END COLOR RGB COMPONENTS
    ENDR = INT(ENDCOL / 16)
    ENDG = INT(ENDCOL / 4) MOD 4
    ENDB =     ENDCOL      MOD 4

    'BLEND COLOR RGB COMPONENTS TOGETHER
    RESULTR = INT(STARTR + ((ENDR - STARTR) * VALUE))
    RESULTG = INT(STARTG + ((ENDG - STARTG) * VALUE))
    RESULTB = INT(STARTB + ((ENDB - STARTB) * VALUE))

    'BUILD THE RESULTING BLENDED COLOR
    RESULT = RESULTR * 16 + RESULTG * 4 + RESULTB
END SUB

'***************************************
'ADD AN INFO MESSAGE TO SHOW
'MSG$ - MESSAGE TO ADD
'***************************************
SUB ADDMSG(MSG$)
    IF LEN(INFOMSG$) THEN
        INFOMSG$ = INFOMSG$ + " - "
    END IF

    INFOMSG$ = INFOMSG$ + MSG$
END SUB

'***************************************
'SHOW THE SCROLLING MESSAGE ON BOTTOM
'***************************************
SUB SHOWMSG
    PAL 3

    INC MSGX

    IF MSGX >= 256 THEN
        MSGX = 0
    END IF

    'DO DRAW THE NEXT CHAR?
    IF (MSGX MOD 8) = 0 THEN
        BG 0

        'CALCULATE THE NEXT POS ON THE RIGHT, OUT OF THE SCREEN
        TX = 20 + (MSGX \ 8)
        TY = 14

        L  = LEN(INFOMSG$)
        C$ = " "

        'ALL THE TEXT WAS DRAWN?
        IF L THEN
            'GET THE NEXT CHAR TO DRAW
            C$ = MID$(INFOMSG$, 1, 1)

            'REMOVE LAST DRAWN CHAR FROM STRING
            INFOMSG$ = RIGHT$(INFOMSG$, L - 1)
        END IF

        'DRAW THE NEXT CHAR
        TEXT TX, TY, C$
    END IF
END SUB

'***************************************
'MOVE THE PLAYER AND CHECK HIS POSITION
'***************************************
SUB MOVEPLAYER
    ISWALKING = 0
    PREVPOSX  = CHARDATA(0)
    PREVPOSY  = CHARDATA(1)
    PREVPOSZ  = CHARDATA(2)

    'HANDLE THE USER INPUT
    IF ROOMCHANGING = 0 THEN
        UU = UP(0)
        DD = DOWN(0)
        LL = LEFT(0)
        RR = RIGHT(0)

        IF (USEDIAGS AND LL AND DD) OR (USEDIAGS = 0 AND LL) THEN
            'LEFT MOVE
            ADD CHARDATA(0), PLAYERVELOCITY
            PLAYERDIR = 0
            ISWALKING = 1
        ELSE IF (USEDIAGS AND DD AND RR) OR (USEDIAGS = 0 AND DD) THEN
            'DOWN MOVE
            ADD CHARDATA(1), PLAYERVELOCITY
            PLAYERDIR = 2
            ISWALKING = 1
        ELSE IF (USEDIAGS AND RR AND UU) OR (USEDIAGS = 0 AND RR) THEN
            'RIGHT MOVE
            ADD CHARDATA(0), -PLAYERVELOCITY
            PLAYERDIR = 1
            ISWALKING = 1
        ELSE IF (USEDIAGS AND UU AND LL) OR (USEDIAGS = 0 AND UU) THEN
            'UP MOVE
            ADD CHARDATA(1), -PLAYERVELOCITY
            PLAYERDIR = 3
            ISWALKING = 1
        END IF
    END IF

    X        = CHARDATA(0)
    Y        = CHARDATA(1)
    Z        = CHARDATA(2)
    HITROBOT = 0
    HITSCENE = 0
    HITLIMIT = 0
    VALID    = 0

    'CHECK IF NEXT PLAYER POSITION IS VALID
    CALL CHECKPOS(X, Y, Z, -1, 1, HITROBOT, HITSCENE, HITLIMIT, VALID)

    'HIT SOMETHING IN THE SCENE? REVERT POSITION IF YES
    IF (VALID = 0 AND HITROBOT = 0) OR (HITSCENE OR HITLIMIT) THEN
        CHARDATA(0) = PREVPOSX
        CHARDATA(1) = PREVPOSY
        CHARDATA(2) = PREVPOSZ
        ISWALKING   = 0
    END IF

    'HIT A ROBOT?
    IF HITROBOT = 1 THEN
        IF PLAYERLIFE > 0 THEN
            'DECREASE LIFE AND PLAY LOSING LIFE SOUND
            DEC PLAYERLIFE
            TRACK 2, 1
        END IF
    END IF

    DOOR = 0
    PDIR = PLAYERDIR

    'CHECK IF PLAYER IS FACING A DOOR
    CALL CHECKDOOR(CHARDATA(0), CHARDATA(1), CHARDATA(2), PDIR, DOOR)

    'A DOOR WAS REACHED?
    IF DOOR <> 0 THEN
        CALL ONPLAYERREACHEDDOOR(DOOR)
    END IF

    FRAME = 0

    'ANIMATE PLAYER IF WALKING
    IF ISWALKING THEN
        FRAME = CHARDATA(3) \ 5

        'PLAY THE STEP SOUND EVERY LOOP
        IF CHARDATA(3) = 0 THEN
            TRACK 0, 3
        END IF
    END IF

    INDEX = 0

    'ADD THE PLAYER SPRITE TO THE SCENE
    SCENEITEMS(INDEX, 0) = CHARDATA(0)
    SCENEITEMS(INDEX, 1) = CHARDATA(1)
    SCENEITEMS(INDEX, 2) = CHARDATA(2)
    SCENEITEMS(INDEX, 3) = ((PLAYERDIR MOD 2) * 2) + FRAME
    SCENEITEMS(INDEX, 4) =   PLAYERDIR > 1
    SCENEITEMS(INDEX, 5) = 1

    CHARDATA(3) = (CHARDATA(3) + 1) MOD 10
END SUB

'***************************************
'CHECK IF PLAYER IS FACING A DOOR
'X - CHARACTER X POSITION
'Y - CHARACTER Y POSITION
'Z - CHARACTER Z POSITION
'PDIR - PLAYER DIRECTION
'R[OUT] - RESULT, WHERE:
'         0 - NO DOOR
'         1 - TOP DOOR
'         2 - RIGHT DOOR
'         3 - BOTTOM DOOR
'         4 - LEFT DOOR
'***************************************
SUB CHECKDOOR(X, Y, Z, PDIR, R)
    R      = 0
    RESULT = 0

    'CHECK THE TOP DOOR IF VISIBLE AND PLAYER IS WALKING AGAINST IT
    IF DOORS(0, 0) = 1 AND PDIR = 3 THEN
        'IS PLAYER INSIDE DOOR TRIGGER?
        CALL CHECKDOORTRIGGER(X, Y, Z, 0, RESULT)

        IF RESULT = 1 THEN
            R = 1
            EXIT SUB
        END IF
    END IF

    'CHECK THE RIGHT DOOR IF VISIBLE AND PLAYER IS WALKING AGAINST IT
    IF DOORS(1, 0) = 1 AND PDIR = 1 THEN
        'IS PLAYER INSIDE DOOR TRIGGER?
        CALL CHECKDOORTRIGGER(X, Y, Z, 1, RESULT)

        IF RESULT = 1 THEN
            R = 2
            EXIT SUB
        END IF
    END IF

    'CHECK THE BOTTOM DOOR IF VISIBLE AND PLAYER IS WALKING AGAINST IT
    IF DOORS(2, 0) = 1 AND PDIR = 2 THEN
        'IS PLAYER INSIDE DOOR TRIGGER?
        CALL CHECKDOORTRIGGER(X, Y, Z, 2, RESULT)

        IF RESULT = 1 THEN
            R = 3
            EXIT SUB
        END IF
    END IF

    'CHECK THE LEFT DOOR IF VISIBLE AND PLAYER IS WALKING AGAINST IT
    IF DOORS(3, 0) = 1 AND PDIR = 0 THEN
        'IS PLAYER INSIDE DOOR TRIGGER?
        CALL CHECKDOORTRIGGER(X, Y, Z, 3, RESULT)

        IF RESULT = 1 THEN
            R = 4
            EXIT SUB
        END IF
    END IF
END SUB

'***************************************
'ANIMATE THE SCENE ITEMS
'***************************************
SUB ANIMSCENEITEMS
    'ITERATE THROUGH SCENE ITEMS
    FOR I = 0 TO UBOUND(SCENEITEMS) - 1
        'IS ITEM A ROBOT?
        IF SCENEITEMS(I, 3) >= 4 AND SCENEITEMS(I, 3) <= 7 THEN
            'ANIMATE AND MOVE THE ROBOT
            CALL MOVEROBOT(I)
        END IF
    NEXT I
END SUB

'***************************************
'MOVE AND ANIMATE THE ROBOT
'INDEX - SCENE ITEM INDEX CONTAINING THE ROBOT
'***************************************
SUB MOVEROBOT(INDEX)
    'ANIMATE THE ROBOT COLORS
    CALL ANIMATEROBOTPALETTE(INDEX)

    'KEEP CURRENT POS AND CALCULATE DIR
    OLDPOSX   = SCENEITEMS(INDEX, 0)
    OLDPOSY   = SCENEITEMS(INDEX, 1)
    XTOPLAYER = SCENEITEMS(INDEX, 0) - CHARDATA(0)
    YTOPLAYER = SCENEITEMS(INDEX, 1) - CHARDATA(1)

    'CALCULATE THE NEXT ROBOT POSITION
    IF (ABS(XTOPLAYER) > ABS(YTOPLAYER)) THEN
        ADD SCENEITEMS(INDEX, 0), -0.5 * SGN(XTOPLAYER)
    ELSE
        ADD SCENEITEMS(INDEX, 1), -0.5 * SGN(YTOPLAYER)
    END IF

    'CHECK IF NEXT ROBOT POSITION IS VALID
    X        = SCENEITEMS(INDEX, 0)
    Y        = SCENEITEMS(INDEX, 1)
    Z        = SCENEITEMS(INDEX, 2)
    HITROBOT = 0
    HITSCENE = 0
    HITLIMIT = 0
    VALID    = 0
    CALL CHECKPOS(X,Y,Z, INDEX, 0, HITROBOT,HITSCENE,HITLIMIT, VALID)

    'NOT VALID, REVERT TO PREVIOUS KNOWN VALID POS
    IF (VALID = 0) THEN
        SCENEITEMS(INDEX, 0) = OLDPOSX
        SCENEITEMS(INDEX, 1) = OLDPOSY
    END IF

    FRAME     = 0
    ROBOTDIR  = SCENEITEMS(INDEX, 8)
    ISWALKING = 0

    'GET IF ROBOT IS WALKING AND MOVE DIR FROM OLD AND NEW POS
    IF (SCENEITEMS(INDEX, 0) < OLDPOSX) THEN
        ROBOTDIR  = 1
        ISWALKING = 1
    ELSE IF (SCENEITEMS(INDEX, 0) > OLDPOSX) THEN
        ROBOTDIR  = 0
        ISWALKING = 1
    ELSE IF (SCENEITEMS(INDEX, 1) < OLDPOSY) THEN
        ROBOTDIR  = 3
        ISWALKING = 1
    ELSE IF (SCENEITEMS(INDEX, 1) > OLDPOSY) THEN
        ROBOTDIR  = 2
        ISWALKING = 1
    END IF

    'ANIMATE ROBOT IF WALKING
    IF ISWALKING THEN
        FRAME = SCENEITEMS(INDEX, 6) \ 5

        'PLAY THE STEP SOUND EVERY LOOP
        IF SCENEITEMS(INDEX, 6) = 0 THEN
            TRACK 1, 2
        END IF
    END IF

    'UPDATE SCENE ITEM VALUES
    SCENEITEMS(INDEX, 3) = 4 + ((ROBOTDIR MOD 2) * 2) + FRAME
    SCENEITEMS(INDEX, 4) = ROBOTDIR > 1
    SCENEITEMS(INDEX, 6) = (SCENEITEMS(INDEX, 6) + 1) MOD 10
    SCENEITEMS(INDEX, 8) = ROBOTDIR
END SUB

'***************************************
'ANIMATE PALETTE (NB 4) MATCHING WITH
'ROBOTS OR ELECTRONIC ELEMENTS
'INDEX - ITEM INDEX
'NOTE BE AWARE THAT, IF MANY ITEMS ARE ANIMATED IN THE SAME TIME,
'     THE LAST ITEM PALETTE WILL OVERRIDE ALL THE OTHERS
'***************************************
SUB ANIMATEROBOTPALETTE(INDEX)
    IF ROOMCHANGING THEN
        EXIT SUB
    END IF

    'CALCULATE BLENDING VALUE TO ANIMATE THE COLOR
    VALUE = COS(SCENEITEMS(INDEX, 7) / 100)
    
    IF VALUE <= 0.0 THEN
        VALUE = 0.0
    END IF

    'BLEND THE LAST PALETTE COLOR
    C = 0
    CALL BLENDCOLORS(PALETTES(4, 3), 0, VALUE, C)

    'APPLY THE NEWLY BLENDED PALETTE
    PALETTE 4, , , , C

    'CALCULATE NEXT COLOR FRAME
    ADD SCENEITEMS(INDEX, 7), 5

    'OUT OF BOUNDS?
    IF (SCENEITEMS(INDEX, 7) >= 628) THEN
        SCENEITEMS(INDEX, 7) = 0
    END IF
END SUB

'***************************************
'CHECK IF CHARACTER POSITION IS VALID
'X - CHARACTER X POSITION
'Y - CHARACTER Y POSITION
'Z - CHARACTER Z POSITION
'SKIP - ITEM INDEX TO SKIP IN THE SCENE OBJECT COLLISION, IGNORED IF -1
'ALL - IF 1, ALL ITEMS WILL BE TESTED EVEN IF A COLLISION WAS FOUND
'HITROBOT[OUT] - HIT ROBOT COUNT IF ALL = 1,
'                1 IF FIRST HIT IS ROBOT AND ALL = 0
'HITSCENE[OUT] - HIT SCENE ITEM COUNT IF ALL = 1,
'                1 IF FIRST HIT IS SCENE ITEM AND ALL = 0
'HITLIMIT[OUT] - HIT SCENE LIMIT COUNT IF ALL = 1,
'                1 IF FIRST HIT IS SCENE LIMIT AND ALL = 0
'R[OUT] - RESULT, IF 1 POS IS VALID, OTHERWISE 0
'***************************************
SUB CHECKPOS(X, Y, Z, SKIP, ALL, HITROBOT, HITSCENE, HITLIMIT, R)
    HITROBOT = 0
    HITSCENE = 0
    HITLIMIT = 0
    R        = 0

    'IS CHARACTER OUT OF PLAYFIELD ON X AXIS?
    IF X <= ORIGIN(0) - RADIUS OR X >= ORIGIN(0) + RADIUS THEN
        INC HITLIMIT

        IF ALL = 0 THEN
            EXIT SUB
        END IF
    END IF

    'IS CHARACTER OUT OF PLAYFIELD ON Y AXIS?
    IF Y <= ORIGIN(1) - RADIUS OR Y >= ORIGIN(1) + RADIUS THEN
        INC HITLIMIT

        IF ALL = 0 THEN
            EXIT SUB
        END IF
    END IF

    'TEST COLLISIONS WITH EACH SCENE OBJECTS
    FOR I = 1 TO UBOUND(SCENEITEMS) - 1
        'SHOULD SKIP THIS ITEM?
        IF I <> SKIP THEN
            'IS OBJECT VISIBLE?
            IF SCENEITEMS(I, 5) = 1 THEN
                SPRIDX = SCENEITEMS(I, 3)
                BBIDX  = COLLECTION(SPRIDX, 7)
                MIX    = SCENEITEMS(I, 0) + BBOX(BBIDX, 0)
                MIY    = SCENEITEMS(I, 1) + BBOX(BBIDX, 1)
                MIZ    = SCENEITEMS(I, 2) + BBOX(BBIDX, 2)
                MAXX   = SCENEITEMS(I, 0) + BBOX(BBIDX, 3)
                MAY    = SCENEITEMS(I, 1) + BBOX(BBIDX, 4)
                MAZ    = SCENEITEMS(I, 2) + BBOX(BBIDX, 5)
                RES    = 0

                'TEST COLLISION BETWEEN OBJECT AND CHARACTER
                CALL INSIDEBOX(X,Y,Z, MIX,MIY,MIZ, MAXX,MAY,MAZ, RES)

                'FOUND A COLLISION?
                IF RES = 1 THEN
                    'GET THE ITEM TYPE
                    ITEMTYPE = SCENEITEMS(I, 3)

                    'IS ITEM A ROBOT?
                    IF ITEMTYPE >= 4 AND ITEMTYPE <= 7 THEN
                        INC HITROBOT
                    ELSE
                        INC HITSCENE
                    END IF

                    'DO TEST ALL COLLISIONS?
                    IF ALL = 0 THEN
                        EXIT SUB
                    END IF
                END IF
            END IF
        END IF
    NEXT I
    
    'NEEDED TO CHECK ALL COLLISION AND FOUND AT LEAST ONE COLLISION?
    IF HITROBOT = 1 OR HITSCENE = 1 OR HITLIMIT = 1 THEN
        EXIT SUB
    END IF

    R = 1
END SUB

'***************************************
'CHECK IF POSITION IS INSIDE A DOOR TRIGGER ZONE
'X - X POSITION
'Y - Y POSITION
'Z - Z POSITION
'INDEX - DOOR INDEX ROR WHICH TRIGGER ZONE SHOULD BE TESTED
'R[OUT] - RESULT, 1 IF POS IS INSIDE TRIGGER, OTHERWISE 0
'***************************************
SUB CHECKDOORTRIGGER(X, Y, Z, INDEX, R)
    MINX = DOORS(INDEX, 1)
    MINY = DOORS(INDEX, 2)
    MINZ = DOORS(INDEX, 3)
    MAXX = DOORS(INDEX, 4)
    MAXY = DOORS(INDEX, 5)
    MAXZ = DOORS(INDEX, 6)

    CALL INSIDEBOX(X, Y, Z, MINX, MINY, MINZ, MAXX, MAXY, MAXZ, R)
END SUB

'***************************************
'CHECK IF POSITION IS INSIDE A BOX
'X - X POSITION
'Y - Y POSITION
'Z - Z POSITION
'MINX - MIN BOX X POSITION
'MINY - MIN BOX Y POSITION
'MINZ - MIN BOX Z POSITION
'MAXX - MAX BOX X POSITION
'MAXY - MAX BOX Y POSITION
'MAXZ - MAX BOX Z POSITION
'R[OUT] - RESULT, 1 IF POS IS INSIDE THE BOX, OTHERWISE 0
'***************************************
SUB INSIDEBOX(X, Y, Z, MINX, MINY, MINZ, MAXX, MAXY, MAXZ, R)
    IF X >= MINX AND Y >= MINY AND Z >= MINZ THEN
        IF X <= MAXX AND Y <= MAXY AND Z <= MAXZ THEN
            R = 1
            EXIT SUB
        END IF
    END IF

    R = 0
END SUB

'***************************************
'CALLED WHEN A DOOR IS REACHED
'DOOR - THE REACHED DOOR, WHERE:
'       1 - TOP DOOR
'       2 - RIGHT DOOR
'       3 - BOTTOM DOOR
'       4 - LEFT DOOR
'***************************************
SUB ONPLAYERREACHEDDOOR(DOOR)
    IF ROOMCHANGING THEN
        EXIT SUB
    END IF

    ROOMCHANGING = 1

    PAL 7

    LOCATE 0, 0

    IF DOOR = 1 THEN
        CALL ADDMSG("DOOR 1")
        NEXTPOSX = 25.25
        NEXTPOSY = 135.25
        NEXTDIR  = 3
    ELSE IF DOOR = 2 THEN
        CALL ADDMSG("DOOR 2")
        NEXTPOSX = 55.25
        NEXTPOSY = 105.25
        NEXTDIR  = 1
    ELSE IF DOOR = 3 THEN
        CALL ADDMSG("DOOR 3")
        NEXTPOSX = 25.25
        NEXTPOSY = 75.25
        NEXTDIR  = 2
    ELSE IF DOOR = 4 THEN
        CALL ADDMSG("IT'S LOCKED! I NEED A RED CARD...")
        NEXTPOSX = -4.75
        NEXTPOSY =  105.25
        NEXTDIR  = 0
    END IF
END SUB

'***************************************
'DRAW THE INTERFACE
'***************************************
SUB DRAWINTERFACE
    PAL 6
    BG 1

    'DRAW THE HEART SYMBOL
    IF LIFEFRAME >= 50 THEN
        CELL 17, 11, 46
    ELSE
        CELL 17, 11, 45
    END IF

    'CALCULATE NEXT HEART FRAME
    LIFEFRAME = (LIFEFRAME + 1) MOD 60

    'CLEAR THE PREVIOUS LIFE TEXT
    LOCATE 15, 12
    PRINT "   "

    'CALCULATE THE LIFE TEXT POSITION
    IF (PLAYERLIFE = 100) THEN
        LOCATE 15, 12
    ELSE IF (PLAYERLIFE >= 10) THEN
        LOCATE 16, 12
    ELSE
        LOCATE 17, 12
    END IF

    'DRAW THE LIFE TEXT
    PAL 3
    PRINT PLAYERLIFE

    PAL 1
    BG 1

    'DRAW THE WALLET ICON
    CELL 2, 11, 47

    XPOS            = 2
    WALLETITEMCOUNT = 0

    'DRAW THE WALLET CONTENT
    FOR I = 0 TO UBOUND(WALLET) - 1
        IF WALLET(I) > 0 THEN
            'DRAW THE WALLET ITEM
            IF WALLET(I) = 1 THEN
                PAL 6
                CELL XPOS, 12, 88
            ELSE IF WALLET(I) = 2 THEN
                PAL 6
                CELL XPOS, 12, 87
            ELSE IF WALLET(I) = 3 THEN
                PAL 2
                CELL XPOS, 12, 87
            END IF

            INC XPOS
            INC WALLETITEMCOUNT
        END IF
    NEXT I

    PAL 3

    'FILL REMAINING WALLET LOCATIONS WITH EMPTY SLOTS
    FOR I = WALLETITEMCOUNT TO UBOUND(WALLET) - 1
        CELL XPOS, 12, 86
        INC XPOS
    NEXT I
END SUB

'***************************************
'DRAW THE SCENE PART WHICH WILL NEVER
'CHANGE DURING THE SCENE LIFETIME
'***************************************
SUB DRAWSTATICSCENE
    BG 0
    PAL 0

    'DRAW THE SCENE (FROM BACKGROUND DESIGNER)
    BG COPY 0, 0, 20, 16 TO 0, 0

    'DRAW THE DOORS
    CALL DRAWLEFTDOOR(0)
    CALL DRAWTOPDOOR(0)
    CALL DRAWRIGHTDOOR(0)
    CALL DRAWBOTTOMDOOR(0)
END SUB

'***************************************
'DRAW THE SCENE PART WHICH WILL CHANGE
'DYNAMICALLY
'***************************************
SUB DRAWSCENE
    DIM DRAWITEMS(ITEMCOUNT, 5)

    ENTITYCOUNT = 0

    'RASTERIZE THE SCENE ITEMS TO DRAW
    FOR I = 0 TO UBOUND(SCENEITEMS) - 1
        IF SCENEITEMS(I, 5) = 1 THEN
            X = SCENEITEMS(I, 0)
            Y = SCENEITEMS(I, 1)
            Z = SCENEITEMS(I, 2)
            CALL PROJECTISO(X, Y, Z, DRAWITEMS(I, 0), DRAWITEMS(I, 1))
            DRAWITEMS(I, 2) = SCENEITEMS(I, 4)
            DRAWITEMS(I, 3) = SCENEITEMS(I, 3)
            INC ENTITYCOUNT
        END IF
    NEXT I

    DIM SORTEDITEMS(ITEMCOUNT)

    'SORT THE ITEMS BY Z ORDER
    CALL SORT(DRAWITEMS(), SORTEDITEMS())

    SLOT = 18

    'DRAW THE ITEMS IN THE SCENE
    FOR I = 0 TO ENTITYCOUNT - 1
        X      = DRAWITEMS(SORTEDITEMS(I), 0)
        Y      = DRAWITEMS(SORTEDITEMS(I), 1)
        MIRROR = DRAWITEMS(SORTEDITEMS(I), 2)
        INDEX  = DRAWITEMS(SORTEDITEMS(I), 3)
        CALL DRAWSPRITE(X, Y, MIRROR, INDEX, SLOT)
    NEXT I
END SUB

'***************************************
'SORT THE ITEMS TO DRAW BY Z ORDER
'ENTITIES - SCENE ITEM ENTITIES TO SORT
'RESULT[OUT] - SORTED ITEMS
'***************************************
SUB SORT(ENTITIES(), RESULT())
    DIM BUCKETS(62, ITEMCOUNT + 1)

    'ITERATE THROUGH SCENE ITEMS
    FOR I = 0 TO UBOUND(SCENEITEMS) - 1
        'IS ITEM VISIBLE IN SCENE?
        IF SCENEITEMS(I, 5) = 1 THEN
            'CALCULATE THE DISTANCE FROM CAMERA
            DISTANCE = INT(ENTITIES(I, 1)) - 35

            'IS DISTANCE OUT OF BOUNDS?
            IF DISTANCE < 62 THEN
                'SET ITEM IN BUCKET ARRAY
                INC BUCKETS(DISTANCE, 0)
                BUCKETS(DISTANCE, BUCKETS(DISTANCE, 0)) = I
            END IF
        END IF
    NEXT I

    POS = 0

    'ITERATE THROUGH BUCKETS AND SORT THEM BY DISTANCE IN RESULT
    FOR I = UBOUND(BUCKETS) - 1 TO 0 STEP -1
        FOR J = 0 TO BUCKETS(I, 0) - 1
            RESULT(POS) = BUCKETS(I, J + 1)
            INC POS
        NEXT J
    NEXT I
END SUB

'***************************************
'DRAW A SPRITE FROM THE COLLECTION
'X - SPRITE X POSITION IN PIXELS
'Y - SPRITE Y POSITION IN PIXELS
'MIRROR - IF 1, THE SPRITE WILL BE MIRRORED ON X AXIS
'INDEX - THE SPRITE INDEX TO DRAW IN THE COLLECTION
'SLOT[IN, OUT] - THE NEXT AVAILABLE SPRITE SLOT (I.E SPRITE INDEX)
'NOTE THE POSITION IS BASED ON THE X CENTER AND Y BOTTOM
'***************************************
SUB DRAWSPRITE(X, Y, MIRROR, INDEX, SLOT)
    'CALCULATE THE CENTER X AND TOP Y POSITION
    CX = X - 4
    TY = Y - COLLECTION(INDEX, 6)

    'DRAW THE TOP SPRITE
    IF COLLECTION(INDEX, 0) <> 0 THEN
        SPRITE SLOT PAL COLLECTION(INDEX, 3) FLIP MIRROR, 0
        SPRITE SLOT, CX, TY, COLLECTION(INDEX, 0)
        INC SLOT
    END IF

    'DRAW THE MASK SPRITE
    IF COLLECTION(INDEX, 1) <> 0 THEN
        SPRITE SLOT PAL COLLECTION(INDEX, 4) FLIP MIRROR, 0
        SPRITE SLOT, CX, TY, COLLECTION(INDEX, 1)
        INC SLOT
    END IF

    'DRAW THE BOTTOM SPRITE
    IF COLLECTION(INDEX, 2) <> 0 THEN
        SPRITE SLOT PAL COLLECTION(INDEX, 5) FLIP MIRROR, 0
        SPRITE SLOT, CX, Y, COLLECTION(INDEX, 2)
        INC SLOT
    END IF
END SUB

'***************************************
'DRAW THE TOP DOOR
'ISLOCKED - IF 1 DOOR IS LOCKED
'***************************************
SUB DRAWTOPDOOR(ISLOCKED)
    IF DOORS(0, 0) = 0 THEN
        EXIT SUB
    END IF

    DIM DOORITEMS(7, 3)
    CALL FILLDOORITEM(5, 7, 17, DOORITEMS(), 0)
    CALL FILLDOORITEM(5, 6, 18, DOORITEMS(), 1)
    CALL FILLDOORITEM(5, 5, 19, DOORITEMS(), 2)
    CALL FILLDOORITEM(5, 4, 20, DOORITEMS(), 3)
    CALL FILLDOORITEM(6, 4, 21, DOORITEMS(), 4)
    CALL FILLDOORITEM(6, 5, 22, DOORITEMS(), 5)
    CALL FILLDOORITEM(6, 6, 23, DOORITEMS(), 6)

    CALL DRAWBACKDOOR(DOORITEMS(), ISLOCKED)
END SUB

'***************************************
'DRAW THE RIGHT DOOR
'ISLOCKED - IF 1 DOOR IS LOCKED
'***************************************
SUB DRAWRIGHTDOOR(ISLOCKED)
    IF DOORS(1, 0) = 0 THEN
        EXIT SUB
    END IF

    DIM DOORITEMS(7, 3)
    CALL FILLDOORITEM(13, 6, 24, DOORITEMS(), 0)
    CALL FILLDOORITEM(13, 5, 25, DOORITEMS(), 1)
    CALL FILLDOORITEM(13, 4, 26, DOORITEMS(), 2)
    CALL FILLDOORITEM(14, 4, 27, DOORITEMS(), 3)
    CALL FILLDOORITEM(14, 5, 28, DOORITEMS(), 4)
    CALL FILLDOORITEM(14, 6, 29, DOORITEMS(), 5)
    CALL FILLDOORITEM(14, 7, 30, DOORITEMS(), 6)

    CALL DRAWBACKDOOR(DOORITEMS(), ISLOCKED)
END SUB

'***************************************
'DRAW THE BOTTOM DOOR
'ISLOCKED - IF 1 DOOR IS LOCKED
'***************************************
SUB DRAWBOTTOMDOOR(ISLOCKED)
    IF DOORS(2, 0) = 0 THEN
        EXIT SUB
    END IF

    DIM DOORITEMS(7, 3)
    CALL FILLDOORITEM(13, 11, 17, DOORITEMS(), 0)
    CALL FILLDOORITEM(13, 10, 18, DOORITEMS(), 1)
    CALL FILLDOORITEM(13, 9,  19, DOORITEMS(), 2)
    CALL FILLDOORITEM(13, 8,  20, DOORITEMS(), 3)
    CALL FILLDOORITEM(14, 8,  21, DOORITEMS(), 4)
    CALL FILLDOORITEM(14, 9,  22, DOORITEMS(), 5)
    CALL FILLDOORITEM(14, 10, 23, DOORITEMS(), 6)

    CALL DRAWFRONTDOOR(4, DOORITEMS(), ISLOCKED)
END SUB

'***************************************
'DRAW THE LEFT DOOR
'ISLOCKED - IF 1 DOOR IS LOCKED
'***************************************
SUB DRAWLEFTDOOR(ISLOCKED)
    IF DOORS(3, 0) = 0 THEN
        EXIT SUB
    END IF

    DIM DOORITEMS(7, 3)
    CALL FILLDOORITEM(5, 10, 24, DOORITEMS(), 0)
    CALL FILLDOORITEM(5, 9,  25, DOORITEMS(), 1)
    CALL FILLDOORITEM(5, 8,  26, DOORITEMS(), 2)
    CALL FILLDOORITEM(6, 8,  27, DOORITEMS(), 3)
    CALL FILLDOORITEM(6, 9,  28, DOORITEMS(), 4)
    CALL FILLDOORITEM(6, 10, 29, DOORITEMS(), 5)
    CALL FILLDOORITEM(6, 11, 30, DOORITEMS(), 6)

    CALL DRAWFRONTDOOR(11, DOORITEMS(), ISLOCKED)
END SUB

'***************************************
'FILL A DOOR ITEM
'X - ITEM X POSITION
'Y - ITEM Y POSITION
'C - ITEM CHAR INDEX
'ITEMS() - ITEM LIST CONTAINING ITEM TO FILL
'INDEX - ITEM INDEX TO FILL
'***************************************
SUB FILLDOORITEM(X, Y, C, ITEMS(), INDEX)
    ITEMS(INDEX, 0) = X
    ITEMS(INDEX, 1) = Y
    ITEMS(INDEX, 2) = C
END SUB

'***************************************
'DRAW A BACK DOOR
'ITEMS() - LIST OF DOOR ITEMS TO DRAW
'ISLOCKED - IF 1 DOOR IS LOCKED
'***************************************
SUB DRAWBACKDOOR(ITEMS(), ISLOCKED)
    COLORS = 3
    DELTA  = 0

    IF ISLOCKED THEN
        COLORS = 6
        DELTA  = 14
    END IF

    BG 1
    PAL COLORS

    FOR I = 0 TO UBOUND(ITEMS) - 1
        CH = ITEMS(I, 2) + DELTA
        CELL ITEMS(I, 0), ITEMS(I, 1), CH
    NEXT I
END SUB

'***************************************
'DRAW A FRONT DOOR
'INDEX - FIRST SPRITE INDEX TO USE
'ITEMS() - LIST OF DOOR ITEMS TO DRAW
'ISLOCKED - IF 1 DOOR IS LOCKED
'***************************************
SUB DRAWFRONTDOOR(INDEX, ITEMS(), ISLOCKED)
    COLORS = 3
    DELTA  = 0

    IF ISLOCKED THEN
        COLORS = 6
        DELTA  = 14
    END IF

    FOR I = 0 TO UBOUND(ITEMS) - 1
        CH = ITEMS(I, 2) + DELTA

        SPRITE I + INDEX PAL COLORS
        SPRITE I + INDEX, ITEMS(I, 0) * 8, ITEMS(I, 1) * 8, CH
    NEXT I
END SUB

'***************************************
'CALCULATE THE NEARNESS OBJECT VALUE
'INDEX - OBJECT INDEX TO CALCULATE
'VALUE[OUT] - NEARNESS VALUE
'***************************************
SUB NEARNESS(INDEX, VALUE)
    VALUE =    SCENEITEMS(INDEX, 0)
    ADD VALUE, SCENEITEMS(INDEX, 1)
    ADD VALUE, SCENEITEMS(INDEX, 2)
END SUB

'***************************************
'CALCULATE WHICH OBJECT IS CLOSER THE POINT OR VIEW
'LEFTINDEX - LEFT OBJECT INDEX TO COMPARE
'RIGHTINDEX - RIGHT INDEX TO COMPARE WITH
'RESULT[OUT] - THE INDEX OF THE CLOSER OBJECT
'***************************************
SUB CLOSER(LEFTINDEX, RIGHTINDEX, RESULT)
    IF NEARNESS(LEFTINDEX) > NEARNESS(RIGHTINDEX) THEN
        RESULT = LEFTINDEX
    ELSE
        RESULT = RIGHTINDEX
    END IF
END SUB

'***************************************
'PROJECT 3D ISO COORDS TO 2D COORDS
'X - 3D ISO X POSITION
'Y - 3D ISO Y POSITION
'Z - 3D ISO Z POSITION
'XP[OUT] - PROJECTED 2D X POSITION
'YP[OUT] - PROJECTED 2D Y POSITION
'***************************************
SUB PROJECTISO(X, Y, Z, XP, YP)
    XP = Y - X
    YP = (X * 0.5) + (Y * 0.5) - Z
END SUB

'***************************************
'SCROLL TEXT RASTER FUNCTION
'***************************************
SUB SCROLLTEXTRASTERFUNC
    'SCROLL THE MESSAGE AREA
    IF RASTER >= 112 AND RASTER < 120 THEN
        SCROLL 0, MSGX, 0
    ELSE
        SCROLL 0, 0, 0
    END IF
END SUB

BBOXDATA:
    DATA -4.0, -4.0, -16.0, 4.0, 4.0, 0.0
    DATA -2.0, -4.0, -16.0, 6.0, 4.0, 0.0
    DATA -6.0, -4.0, -16.0, 2.0, 4.0, 0.0
    DATA -4.0, -2.0, -16.0, 4.0, 6.0, 0.0
    DATA -4.0, -6.0, -16.0, 4.0, 2.0, 0.0

COLLECTIONDATA:
    DATA 64,  65, 66,  1, 2, 2, 8, 0, 64,  65, 67,  1, 2, 2, 8, 0
    DATA 68,  69, 70,  1, 2, 2, 8, 0, 68,  69, 71,  1, 2, 2, 8, 0
    DATA 72,  0,  73,  4, 0, 4, 8, 0, 72,  0,  74,  4, 0, 4, 8, 0
    DATA 75,  0,  76,  4, 0, 4, 8, 0, 75,  0,  77,  4, 0, 4, 8, 0
    DATA 129, 0,  128, 6, 0, 5, 5, 0, 130, 0,  131, 5, 0, 5, 8, 2
    DATA 132, 0,  133, 5, 0, 5, 8, 1, 134, 0,  135, 5, 0, 5, 8, 3
    DATA 136, 0,  137, 5, 0, 5, 8, 4, 142, 0,  143, 5, 0, 5, 8, 2
    DATA 144, 0,  145, 5, 0, 5, 8, 1, 138, 0,  139, 5, 0, 5, 8, 3
    DATA 140, 0,  141, 5, 0, 5, 8, 4, 146, 0,  147, 4, 0, 4, 8, 0
    DATA 148, 0,  149, 4, 0, 4, 8, 0, 150, 0,  151, 5, 0, 5, 8, 2
    DATA 152, 0,  153, 5, 0, 5, 8, 1, 154, 0,  155, 5, 0, 5, 8, 3
    DATA 156, 0,  157, 5, 0, 5, 8, 4, 158, 0,  159, 5, 0, 5, 8, 2
    DATA 160, 0,  161, 5, 0, 5, 8, 1, 162, 0,  163, 5, 0, 5, 8, 3
    DATA 164, 0,  165, 5, 0, 5, 8, 4, 166, 0,  167, 4, 0, 4, 8, 2
    DATA 168, 0,  169, 4, 0, 4, 8, 1, 170, 0,  171, 4, 0, 4, 8, 3
    DATA 172, 0,  173, 4, 0, 4, 8, 4, 174, 0,  175, 2, 0, 2, 8, 0
    DATA 176, 0,  177, 2, 0, 2, 8, 0, 78,  0,  79,  4, 0, 4, 8, 0
    DATA 80,  0,  81,  2, 0, 2, 8, 0, 82,  0,  83,  4, 0, 4, 8, 0
    DATA 84,  0,  85,  2, 0, 2, 8, 0

PLAYERDATA:
    DATA 0.0, 0

DOORDATA:
    DATA  17.75, 75.25,  -24.0,  32.75, 76.25,  0.0
    DATA -4.75,  97.25,  -24.0, -3.75,  112.75, 0.0
    DATA  17.75, 134.25, -24.0,  33.55, 135.25, 0.0
    DATA  54.25, 97.75,  -24.0,  55.25, 114.25, 0.0

'SCENE DATA, FIRST NUMBER IS ITEM COUNT, MAX 15
'EACH ITEM IS CONFIGURED AS FOLLOW: X, Y, Z, SPRITE INDEX, MIRRORED
'LAST 4 DATA ARE TOP, RIGHT, BOTTOM AND LEFT DOORS VISIBILITY

ENTRANCE:
    DATA 5
    DATA 6.5, 86.5,  0.0, 8, 0, 46.5, 86.5,  0.0, 8, 0
    DATA 6.5, 125.5, 0.0, 8, 0, 46.5, 125.5, 0.0, 8, 0
    DATA 2.5, 80.0, 0.0, 4, 1
    DATA 1, 1, 1, 1

#1:MAIN PALETTES
002A1500003906240039061A003F2A15
002B273100392410000E0930003F2A15

#2:MAIN CHARACTERS
00000000000000000000000000000000
00000000030C30C000000000030F3FFF
00000000C0300C0300000000C0F0FCFF
00000000030C30C000000000030F3FFF
030C30C0C0300C03030F3FFFFFFFFFFF
C0300C030F3CF0C0C0F0FCFFF3CF3FFF
00000000C0300C0300000000C0F0FCFF
030C30C0C0300C03030F3FFFFF3F0F03
C0300C030F3CF0C0C0F0FCFFF3CC30C0
C0300C0300000000FF3F0F0300000000
0F3CF0C0C0300C03F3CF3FFFFF3F0F03
C0300C030F3CF0C0FFFFFFFFF3CC30C0
0F3CF0C000000000F3CC30C000000000
C0300C0300000000FF3F0F0300000000
0F3CF0C000000000F3CC30C000000000
C0300C030F3CF0C0FFFFFFFFF3CF3FFF
0F3CF0C0C0300C03F3CF3FFFFFFFFFFF
A0A0808000000000C0C0C08000000000
A0A0A0A0A0A0A0A0C0C0C0C0C0C0C0C0
20A0A0A0A0A0A0A040C0C0C0C0C0C0C0
0000000000030D34000000000000030C
00030D3DD54505050000020E36C60606
05050505050505050606060606060606
05050505040000000606060604000000
A0A0A0A0200000006060606020000000
A0A0A0A0A0A0A0A06060606060606060
00C0B0BCABA2A0A0000040706C636060
0000000000C0B02C000000000000C030
04050505050505050203030303030303
05050505050505050303030303030303
05050101000000000303030100000000
E0E0C08000000000E0E0C08000000000
E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0
60E0E0E0E0E0E0E060E0E0E0E0E0E0E0
0000000000030F3C0000000000030F3C
00030F3FF7C7070700030F3FF7C70707
07070707070707070707070707070707
07070707040000000707070704000000
E0E0E0E020000000E0E0E0E020000000
E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0
00C0F0FCEFE3E0E000C0F0FCEFE3E0E0
0000000000C0F03C0000000000C0F03C
06070707070707070607070707070707
07070707070707070707070707070707
07070301000000000707030100000000
00367F7F7F3E1C0800367F7F7F3E1C08
0000143E3E1C08000000143E3E1C0800
3C24FFFBF1E3F7FF3C24C3850E1C89C3
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
1C3E7E5B3E1C00001C26426500623C18
00000000000042E700000000000042E7
E7FFFF7F6E6CCC18FFFF7E7C6E0C0000
E7FFFEFE66666CC0FFFFFC7866600000
1C3E7E7F3E3F18001C3E7E7F3E7F3E18
00000000000040E600000000000040E6
FFFFFF7F6E7C6E0CFFFF7E7C6E6C0C00
FFFFFEFE66677660FFFFFC7866666000
00183C7E7C38C07E000000002A041880
7F7EBE3C35160200988199010120640C
7F7E7E3D363210009881590100042C60
00183C7E7C38C07E0000000002041880
7F7EBE3C35360600A499810101083106
7F7E7E3D34363000A499410100010E30
080818183838797A0000040406064727
7C78383818180808170F060604040000
000004040606472708081C1C3E3E3E5D
170F0606040400006B773E3E1C1C0808
000810281028512A0000040204024522
5428102810081008150A040204000400
00000402040245220008142A142A1408
150A0402040004004122142A14081408
0054024002402A000054024002402A00
000000000000000000000C3E7C300000
00000C3E7C30000000000C3E7C300000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
0000060E0E0E0C000018667E7E7E3C00
00101020223214080004040808080800
0C33C0F0FCCFF3FF0C3FFFBF8FB38D81
CFF3FFCFF33F0F03B18D81B1CD310D03
0000C03038C808080000C0F0F8F8F8F8
08080808080830C0F8F8F8F8F8F8F0C0
0000030C1C1310100000030F1F1F1F1F
1010101010100C031F1F1F1F1F1F0F03
30CC030F3FF3CFFF30FCFFFDF1CDB181
F3CFFFF3CFFCF0C08DB1818DB38CB0C0
000000000000030F0000000000000000
3FFF7F3F080000000000C0B38C840404
0000000030FCFFFE0000000000000003
FCF0C000000000000D31C10000000000
000000000C3FFF7F00000000000000C0
3F0F030000000000B08C830000000000
000000000000C0F00000000000000000
FCFFFEFC10000000000003CD31212020
00000C122D5DBAB40000000C1E3E7D7B
C8F0F0F0F0F0F030370F0F0F0F0F0F0C
00003048B4BA5D2D00000030787CBEDE
130F0F0F0F0F0F0CECF0F0F0F0F0F030
000000000C33CC7300000101010C3FCF
3C0F030000000000B38C830000000000
6038CCF4F430000060F8FCBCDCF830C0
CC3FFEFC10000000F0C003CD31212020
061C332F2F0C0000061F3F3D3B1F0C03
33FC7F3F080000000F03C0B38C840404
0000000030CC33CE000080808030FCF3
3CF0C00000000000CD31C10000000000
00000000030F3F1F0000000000000030
0F010101000000002C23232303000000
0000000000C0F0FC0000000000000000
FFFCF0C0C00000000003CF7FFDF12020
0000000000030F3F0000000000000000
FF3F0F030300000000C0F3FEBF8F0404
00000000C0F0FCF8000000000000000C
F08080800000000034C4C4C4C0000000
0000183E3F1F471100383E7761FBBFEF
4411040100000000BBEE7B1E07010000
0000000080E0F8FD00000080E0F8DE87
7B1B471747170706EFFFBFEFBFEF7F1E
0000000001071FBF00000001071F7BE1
DED8E2E8E2E8E060F7FFFDF7FDF7FE78
0000187CFCF8E288001C7CEE86DFFDF7
2288208000000000DD77DE78E0800000
C0B08C8381818181C0B0DCABD5ABD5AB
81818181C1310D03D5ABD5ABD53B0D03
030D31C181818181030D3BD5ABD5ABD5
81818181838CB0C0ABD5ABD5ABDCB0C0

#3:MAIN BG
00001410000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000003000400
05000600000000000000000000000000
00000000000000000000000000000000
030004000F0010000F00100005000600
00000000000000000000002000000000
00000000030004000F0010000F001000
0F0010000F0010000500060000000000
0000002000000000030004000F001000
0F0010000F0010000F0010000F001000
0F001000050006000000002000000000
09000A000F0010000F0010000F001000
0F0010000F0010000F0010000B000C00
00000020000000000000000009000A00
0F0010000F0010000F0010000F001000
0B000C00000000000000000000000000
000000000000000009000A000F001000
0F0010000B000C000000000000000000
00000000000000000000000000000000
0000000009000A000B000C0000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000

#15:MAIN SOUND
2800303A010000002800FB04003A0800
2F00900F09000F003F00900F09FE0F00
3800600F08FFFE003800505000000000
0800000F000000000800000F00000000
0800000F000000000800000F00000000
0800000F000000000800000F00000000
0800000F000000002800F00002FF0000
3800305200F0F0007F0A200008FFCC00
03080808034040400304404003044040
03074005030740050304060503040605
03070605038706054040404040404040
40404040404040404040404040404040
40404040404040404040404040404040
40404040404040404040404040404040
40404040404040404040404040404040
40404040404040404040404040404040
40404040404040404040404040404040
40404040404040404040404040404040
40404040404040404040404040404040
40404040404040404040404040404040
40404040404040404040404040404040
40404040404040404040404040404040
40404040404040404040404040404040
40404040404040404040404040404040
2BFF00FF000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
2BEF00FF000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
37DF00FF000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
290F00000000300F000000002D0F0000
0000300F00000000290F00000000300F
000000002D0F00000000300F00000000
2D0F00000000280F00000000240F0000
0000280F000000002D0F000000002F0F
000000002D0F00000000280F00000000
391F000000000000000000003C1F0000
0000000000000000401F000000000000
00000000431F00000000000000000000
401F000000000000000000003C1F0000
0000000000000000391F000000000000
000000003C1F00000000000000000000
2B3F000000004F4F000000002B3F004F
3F004F4F000000002B3F000000004F4F
000000002B3F004F3F004F4F00000000
2B3F000000004F4F000000002B3F0000
00004F4F000000002B3F000000004F4F
000000002B3F000000004F4F00000000
41660000000045660000000048660000
00004566000000004166000000004566
00000000486600000000456600000000
4566000000004866000000004C660000
00004866000000004566000000004866
000000004C6600000000486600000000
401F000000000000000000003C1F0000
0000000000000000391F000000000000
00000000341F00000000000000000000
301F00000000000000000000341F0000
0000000000000000391F000000000000
00000000341F00000000000000000000
FF000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000

